# -*- coding: utf-8 -*-
"""EDA Credit_card_fraud detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e-bmDczrkPm2YtznHLTipKCfvjFn3bMC
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

!pip install -q kaggle

!mkdir ~/.kaggle

!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d "mlg-ulb/creditcardfraud"

!unzip creditcardfraud.zip

import pandas as pd

# Load the dataset
file_path = "creditcard.csv"
data = pd.read_csv("creditcard.csv")

# Inspect the dataset
print(f"Dataset shape: {data.shape}")
print(f"Columns: {data.columns}")
print(data.info())

data.head()

"""Q:1 **How many rows and columns are in the dataset?**

**Rows :284807
columns :31**

"""

data.shape

"""Q:2 **What are the column names and their data types?**

"""

columns = data.columns
print(columns)

"""Q.3  **Are there any missing or null values in the dataset?**

No there are no null Values present

"""

data.isnull().sum()

"""Q.4 **How many transactions are fraudulent, and how many are legitimate?**



"""

# Count the number of fraudulent and legitimate transactions
fraud_count = data['Class'].value_counts()
fraud_percentage = (fraud_count[1] / data.shape[0]) * 100

print(f"Fraudulent transactions: {fraud_count[1]}")
print(f"Legitimate transactions: {fraud_count[0]}")

"""Q.5 **Percentage of fraudulent transactions?**"""

print(f"Percentage of fraudulent transactions: {fraud_percentage:.2f}%")

"""Q.6:**What are the minimum, maximum, mean, and median values for numerical columns like Amount?**"""

data.describe()

"""Q.7: **What is the maximum transaction amount in the dataset, and is it fraudulent?**"""

data['Amount'].max()

# Find the maximum transaction amount
max_transaction_amount = data['Amount'].max()

# Locate the row with the maximum transaction amount
max_amount_row = data[data['Amount'] == max_transaction_amount]

is_fraudulent = max_amount_row['Class'].values[0]

print(f"Maximum transaction amount: {max_transaction_amount}")
print(f"Is it fraudulent? {'Yes' if is_fraudulent == 1 else 'No'}")

"""Q.8 **Can we create a bar chart showing the count of fraudulent vs. legitimate transactions?**

Yes! we can create a bar chart but fraud transaction might not be visible due to less values.

"""

import matplotlib.pyplot as plt

# Bar chart
fraud_count.plot(kind='bar', color=['pink', 'blue'])
plt.title('Fraudulent vs. Legitimate Transactions')
plt.xlabel('Transaction Type (0: Legitimate, 1: Fraudulent)')
plt.ylabel('Count')
plt.show()

"""
The histogram of transaction amounts shows that most transactions are of smaller amounts, with a few larger transactions acting as outliers. The distribution is right-skewed, typical of financial datasets.
"""

plt.hist(data['Amount'], bins=50, color='blue', edgecolor='green')
plt.title('Histogram of Transaction Amounts')
plt.xlabel('Transaction Amount')
plt.ylabel('Frequency')
plt.show()

"""Q.10: **Can we use a heatmap to visualize the correlation between numerical features?**

Yes, a heatmap can visualize correlations between numerical features, using color intensity to indicate the strength and direction of correlations. The diagonal represents perfect self-correlation with a value of 1.
"""

correlation_matrix = data.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()